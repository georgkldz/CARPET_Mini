{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "additionalProperties": false,
  "definitions": {
    "({type:\"matchAgainstRegExp\";}&MatchAgainstRegExpValidationStrategy)|({type:\"externalValidation\";}&ExternalValidationStrategy)": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "comparisons": {
              "items": {
                "$ref": "#/definitions/StaticComparisonConfiguration"
              },
              "type": "array"
            },
            "type": {
              "const": "compareValueFromStatic",
              "type": "string"
            },
            "validOnEmptyField": {
              "description": "Whether empty fields are treated as valid.",
              "type": "boolean"
            }
          },
          "required": ["comparisons", "type", "validOnEmptyField"],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "comparisons": {
              "items": {
                "$ref": "#/definitions/PathComparisonConfiguration"
              },
              "type": "array"
            },
            "type": {
              "const": "compareValueFromPath",
              "type": "string"
            },
            "validOnEmptyField": {
              "description": "Whether empty fields are treated as valid.",
              "type": "boolean"
            }
          },
          "required": ["comparisons", "type", "validOnEmptyField"],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "regExp": {
              "type": "string"
            },
            "type": {
              "const": "matchAgainstRegExp",
              "type": "string"
            },
            "validOnEmptyField": {
              "description": "Whether empty fields are treated as valid.",
              "type": "boolean"
            }
          },
          "required": ["regExp", "type", "validOnEmptyField"],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "type": {
              "const": "externalValidation",
              "type": "string"
            },
            "url": {
              "type": "string"
            },
            "validOnEmptyField": {
              "description": "Whether empty fields are treated as valid.",
              "type": "boolean"
            }
          },
          "required": ["type", "url", "validOnEmptyField"],
          "type": "object"
        }
      ],
      "description": "Configuration for the different InputField validation strategies.\nAs the typescript compiler can't handle \"correlated unions\", it is recommended to defer to generics as described here: https://stackoverflow.com/questions/79160004/can-typescript-infer-subtypes-of-parameters-based-on-a-dynamic-variable-accessin"
    },
    "BasicComparisonOperators": {
      "enum": ["!=", "<", "<=", "=", "==", ">", ">="],
      "type": "string"
    },
    "ButtonComponentState": {
      "additionalProperties": false,
      "description": "The Button-component has to display a label. It may display a progress bar or a loading spinner.\nIt can be disabled on invalid input.",
      "properties": {
        "isCorrect": {
          "description": "Specifices whether the user-inputs put the component in a correct state. Inputs are validated according to the components validation specification.",
          "type": "boolean"
        },
        "isValid": {
          "description": "Specifices whether the user-inputs put the component in a valid state. Gives no indication of correctness of the inputs.",
          "type": "boolean"
        },
        "label": {
          "description": "The label of the button.",
          "type": "string"
        },
        "loadingState": {
          "description": "The loadingState of the button. If true, the button will display a loading spinner.",
          "type": "boolean"
        },
        "progressPercentage": {
          "description": "The progress of the button. If set, the button will display a progress bar.",
          "type": "number"
        }
      },
      "required": ["isCorrect", "isValid", "label", "loadingState"],
      "type": "object"
    },
    "ButtonConfiguration": {
      "additionalProperties": false,
      "description": "The ButtonConfiguration defines the look and behavior of the button.",
      "properties": {
        "dimensions": {
          "additionalProperties": false,
          "description": "The dimensions of the button in pixels. Defaults to 100x50.",
          "properties": {
            "height": {
              "type": "number"
            },
            "width": {
              "type": "number"
            }
          },
          "required": ["height", "width"],
          "type": "object"
        },
        "disableOnInvalid": {
          "description": "Determines wether the button will be disabled if the validation fails.",
          "type": "boolean"
        },
        "icon": {
          "description": "Additional icon for the button. Displayed to the left of the label."
        },
        "innerComponentLayout": {
          "description": "Some components may offer a customizable inner component layout. The layout is required to be built with CSS Grid.",
          "properties": {},
          "type": "object"
        }
      },
      "type": "object"
    },
    "CodeEditorComponentState": {
      "additionalProperties": false,
      "description": "The CodeEditor-component may require state handling. This state is defined here.",
      "properties": {
        "code": {
          "description": "The code-property is a string that contains the user's code.",
          "type": "string"
        },
        "isCorrect": {
          "description": "Specifices whether the user-inputs put the component in a correct state. Inputs are validated according to the components validation specification.",
          "type": "boolean"
        },
        "isValid": {
          "description": "Specifices whether the user-inputs put the component in a valid state. Gives no indication of correctness of the inputs.",
          "type": "boolean"
        }
      },
      "required": ["code", "isCorrect", "isValid"],
      "type": "object"
    },
    "CodeEditorConfiguration": {
      "additionalProperties": false,
      "description": "The CodeEditor-component may have configuration options. These options are defined here.",
      "properties": {
        "darkMode": {
          "description": "The darkMode-property is a boolean that may be used to determine the dark mode of the CodeEditor.",
          "type": "boolean"
        },
        "innerComponentLayout": {
          "description": "Some components may offer a customizable inner component layout. The layout is required to be built with CSS Grid.",
          "properties": {},
          "type": "object"
        },
        "language": {
          "description": "The language-property is a string that may be used to determine the syntax highlighting of the CodeEditor."
        }
      },
      "type": "object"
    },
    "CodeEditorValidationConfiguration<keyofCodeEditorValidationConfigurationMap>": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "type": {
              "const": "validateExternally",
              "type": "string"
            }
          },
          "required": ["type"],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "type": {
              "const": "compareToString",
              "type": "string"
            }
          },
          "required": ["type"],
          "type": "object"
        }
      ],
      "description": "The CodeEditor allows for optional validation strategies.\nThe first strategy is a basic string compare.\nThe second strategy is a request-based strategy, which may depend on a user-defined strategy (e.g. test-suite, output comparisons, more complex string comparisons, etc.).\n   As the second strategy may depend on more than just the code, the entire state is accessible."
    },
    "ComponentConfiguration": {
      "additionalProperties": false,
      "description": "Component configuration. This holds possible configuration options for the component.",
      "properties": {
        "innerComponentLayout": {
          "description": "Some components may offer a customizable inner component layout. The layout is required to be built with CSS Grid.",
          "properties": {},
          "type": "object"
        }
      },
      "type": "object"
    },
    "DotGraphComponentState": {
      "additionalProperties": false,
      "description": "The DOTGraph-component may hold a static dotDescription in its componentData.",
      "properties": {
        "dotDescription": {
          "description": "The dotDescription is a string, that holds the Graphviz-DOT description of the graph.",
          "type": "string"
        },
        "isCorrect": {
          "description": "Specifices whether the user-inputs put the component in a correct state. Inputs are validated according to the components validation specification.",
          "type": "boolean"
        },
        "isValid": {
          "description": "Specifices whether the user-inputs put the component in a valid state. Gives no indication of correctness of the inputs.",
          "type": "boolean"
        }
      },
      "required": ["isCorrect", "isValid"],
      "type": "object"
    },
    "FieldConfiguration": {
      "additionalProperties": false,
      "description": "The FieldConfiguration defines the properties of the InputField component.\nIt extends the QInputProps from Quasar.",
      "properties": {
        "autofocus": {
          "description": "Focus field on initial component render",
          "type": "boolean"
        },
        "autogrow": {
          "description": "Make field autogrow along with its content (uses a textarea)",
          "type": "boolean"
        },
        "bgColor": {
          "$ref": "#/definitions/quasar.NamedColor",
          "description": "Color name for component from the Quasar Color Palette"
        },
        "borderless": {
          "description": "Use 'borderless' design for the field",
          "type": "boolean"
        },
        "bottomSlots": {
          "description": "Enables bottom slots ('error', 'hint', 'counter')",
          "type": "boolean"
        },
        "clearIcon": {
          "description": "Custom icon to use for the clear button when using along with 'clearable' prop",
          "type": "string"
        },
        "clearable": {
          "description": "Appends clearable icon when a value (not undefined or null) is set; When clicked, model becomes null",
          "type": "boolean"
        },
        "color": {
          "$ref": "#/definitions/quasar.NamedColor",
          "description": "Color name for component from the Quasar Color Palette"
        },
        "counter": {
          "description": "Show an automatic counter on bottom right",
          "type": "boolean"
        },
        "dark": {
          "description": "Notify the component that the background is a dark color\nDefault value: null",
          "type": "boolean"
        },
        "debounce": {
          "description": "Debounce amount (in milliseconds) when updating model",
          "type": ["string", "number"]
        },
        "dense": {
          "description": "Dense mode; occupies less space",
          "type": "boolean"
        },
        "disable": {
          "description": "Put component in disabled mode",
          "type": "boolean"
        },
        "error": {
          "description": "Does field have validation errors?\nDefault value: null",
          "type": "boolean"
        },
        "errorMessage": {
          "description": "Validation error message (gets displayed only if 'error' is set to 'true')",
          "type": "string"
        },
        "fillMask": {
          "description": "Fills string with specified characters (or underscore if value is not string) to fill mask's length",
          "type": ["string", "boolean"]
        },
        "filled": {
          "description": "Use 'filled' design for the field",
          "type": "boolean"
        },
        "for": {
          "description": "Used to specify the 'id' of the control and also the 'for' attribute of the label that wraps it; If no 'name' prop is specified, then it is used for this attribute as well",
          "type": "string"
        },
        "hideBottomSpace": {
          "description": "Do not reserve space for hint/error/counter anymore when these are not used; As a result, it also disables the animation for those; It also allows the hint/error area to stretch vertically based on its content",
          "type": "boolean"
        },
        "hideHint": {
          "description": "Hide the helper (hint) text when field doesn't have focus",
          "type": "boolean"
        },
        "hint": {
          "description": "Helper (hint) text which gets placed below your wrapped form component",
          "type": "string"
        },
        "icon": {},
        "innerComponentLayout": {
          "description": "Some components may offer a customizable inner component layout. The layout is required to be built with CSS Grid.",
          "properties": {},
          "type": "object"
        },
        "inputClass": {
          "$ref": "#/definitions/quasar.VueClassProp",
          "description": "Class definitions to be attributed to the underlying input tag"
        },
        "itemAligned": {
          "description": "Match inner content alignment to that of QItem",
          "type": "boolean"
        },
        "label": {
          "description": "A text label that will “float” up above the input field, once the field gets focus",
          "type": "string"
        },
        "labelColor": {
          "$ref": "#/definitions/quasar.NamedColor",
          "description": "Color name for the label from the Quasar Color Palette; Overrides the 'color' prop; The difference from 'color' prop is that the label will always have this color, even when field is not focused"
        },
        "labelSlot": {
          "description": "Enables label slot; You need to set it to force use of the 'label' slot if the 'label' prop is not set",
          "type": "boolean"
        },
        "lazyRules": {
          "description": "If set to boolean true then it checks validation status against the 'rules' only after field loses focus for first time; If set to 'ondemand' then it will trigger only when component's validate() method is manually called or when the wrapper QForm submits itself\nDefault value: false",
          "enum": [false, "ondemand", true]
        },
        "loading": {
          "description": "Signals the user a process is in progress by displaying a spinner; Spinner can be customized by using the 'loading' slot.",
          "type": "boolean"
        },
        "mask": {
          "description": "Custom mask or one of the predefined mask names",
          "type": "string"
        },
        "maxlength": {
          "description": "Specify a max length of model",
          "type": ["string", "number"]
        },
        "name": {
          "description": "Used to specify the name of the control; Useful if dealing with forms; If not specified, it takes the value of 'for' prop, if it exists",
          "type": "string"
        },
        "noErrorIcon": {
          "description": "Hide error icon when there is an error",
          "type": "boolean"
        },
        "onBlur": {
          "additionalProperties": false,
          "description": "Emitted when component loses focus",
          "type": "object"
        },
        "onClear": {
          "additionalProperties": false,
          "description": "When using the 'clearable' property, this event is emitted when the clear icon is clicked",
          "type": "object"
        },
        "onFocus": {
          "additionalProperties": false,
          "description": "Emitted when component gets focused",
          "type": "object"
        },
        "onUpdate:modelValue": {
          "additionalProperties": false,
          "description": "Emitted when the component needs to change the model; Is also used by v-model",
          "type": "object"
        },
        "outlined": {
          "description": "Use 'outlined' design for the field",
          "type": "boolean"
        },
        "placeholder": {
          "type": "string"
        },
        "prefix": {
          "description": "Prefix",
          "type": "string"
        },
        "reactiveRules": {
          "description": "By default a change in the rules does not trigger a new validation until the model changes; If set to true then a change in the rules will trigger a validation; Has a performance penalty, so use it only when you really need it",
          "type": "boolean"
        },
        "readonly": {
          "description": "Put component in readonly mode",
          "type": "boolean"
        },
        "reverseFillMask": {
          "description": "Fills string from the right side of the mask",
          "type": "boolean"
        },
        "rounded": {
          "description": "Applies a small standard border-radius for a squared shape of the component",
          "type": "boolean"
        },
        "rules": {
          "description": "Array of Functions/Strings; If String, then it must be a name of one of the embedded validation rules",
          "items": {
            "$ref": "#/definitions/quasar.ValidationRule"
          },
          "type": "array"
        },
        "shadowText": {
          "description": "Text to be displayed as shadow at the end of the text in the control; Does NOT applies to type=file",
          "type": "string"
        },
        "square": {
          "description": "Remove border-radius so borders are squared; Overrides 'rounded' prop",
          "type": "boolean"
        },
        "stackLabel": {
          "description": "Label will be always shown above the field regardless of field content (if any)",
          "type": "boolean"
        },
        "standout": {
          "description": "Use 'standout' design for the field; Specifies classes to be applied when focused (overriding default ones)",
          "type": ["string", "boolean"]
        },
        "suffix": {
          "description": "Suffix",
          "type": "string"
        },
        "type": {
          "description": "Input type\nDefault value: 'text'",
          "enum": [
            "date",
            "datetime-local",
            "email",
            "file",
            "number",
            "password",
            "search",
            "tel",
            "text",
            "textarea",
            "time",
            "url"
          ],
          "type": "string"
        },
        "unmaskedValue": {
          "description": "Model will be unmasked (won't contain tokens/separation characters)",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "File": {
      "additionalProperties": false,
      "properties": {
        "lastModified": {
          "type": "number"
        },
        "name": {
          "type": "string"
        },
        "size": {
          "type": "number"
        },
        "type": {
          "type": "string"
        },
        "webkitRelativePath": {
          "type": "string"
        }
      },
      "required": [
        "lastModified",
        "name",
        "size",
        "type",
        "webkitRelativePath"
      ],
      "type": "object"
    },
    "FormComponentState": {
      "additionalProperties": false,
      "description": "The Form-component has additional state properties for validation.",
      "properties": {
        "dependenciesAreValidAndFormFieldsAreCorrect": {
          "type": "boolean"
        },
        "formFieldsAreValidAndDependenciesAreCorrect": {
          "type": "boolean"
        },
        "isCorrect": {
          "description": "Specifices whether the user-inputs put the component in a correct state. Inputs are validated according to the components validation specification.",
          "type": "boolean"
        },
        "isValid": {
          "description": "Specifices whether the user-inputs put the component in a valid state. Gives no indication of correctness of the inputs.",
          "type": "boolean"
        }
      },
      "required": [
        "dependenciesAreValidAndFormFieldsAreCorrect",
        "formFieldsAreValidAndDependenciesAreCorrect",
        "isCorrect",
        "isValid"
      ],
      "type": "object"
    },
    "FormNestedComponents": {
      "additionalProperties": false,
      "description": "The Form-component consists of arbitrarily many input fields and a set of buttons.",
      "properties": {
        "actionComponents": {
          "additionalProperties": false,
          "properties": {
            "reset": {
              "$ref": "#/definitions/SerializedButtonComponent"
            },
            "submit": {
              "$ref": "#/definitions/SerializedButtonComponent"
            }
          },
          "required": ["submit"],
          "type": "object"
        },
        "formComponents": {
          "additionalProperties": {
            "$ref": "#/definitions/SerializedInputFieldComponent"
          },
          "type": "object"
        }
      },
      "required": ["actionComponents", "formComponents"],
      "type": "object"
    },
    "FormValidationConfiguration": {
      "additionalProperties": false,
      "description": "The form-component is submitable if the validation checks that are governed by the FormValidationConfiguration are passed.",
      "properties": {
        "submitableWhen": {
          "enum": [
            "dependenciesAreValidAndFormFieldsAreCorrect",
            "formFieldsAreValidAndDependenciesAreCorrect",
            "isCorrect",
            "isValid"
          ],
          "type": "string"
        }
      },
      "required": ["submitableWhen"],
      "type": "object"
    },
    "Hints": {
      "additionalProperties": false,
      "properties": {
        "active": {
          "type": "boolean"
        },
        "current": {
          "type": "number"
        },
        "descriptions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": ["active", "current", "descriptions"],
      "type": "object"
    },
    "InputFieldComponentState": {
      "additionalProperties": false,
      "description": "The InputField-component may hold a static dotDescription in its componentState.",
      "properties": {
        "fieldValue": {
          "anyOf": [
            {
              "additionalProperties": false,
              "patternProperties": {
                "^[0-9]+$": {
                  "$ref": "#/definitions/File"
                }
              },
              "properties": {
                "length": {
                  "type": "number"
                }
              },
              "required": ["length"],
              "type": "object"
            },
            {
              "type": ["string", "number"]
            }
          ]
        },
        "isCorrect": {
          "description": "Specifices whether the user-inputs put the component in a correct state. Inputs are validated according to the components validation specification.",
          "type": "boolean"
        },
        "isValid": {
          "description": "Specifices whether the user-inputs put the component in a valid state. Gives no indication of correctness of the inputs.",
          "type": "boolean"
        }
      },
      "required": ["fieldValue", "isCorrect", "isValid"],
      "type": "object"
    },
    "JSONPathExpression": {
      "anyOf": [
        {
          "pattern": "^\\$\\..*$",
          "type": "string"
        },
        {
          "const": "$",
          "type": "string"
        }
      ],
      "description": "The JSONPathExpression type is used to define a JSONPath expression."
    },
    "LayoutSizes": {
      "enum": ["desktop", "phone", "tablet"],
      "type": "string"
    },
    "Layouts": {
      "additionalProperties": false,
      "properties": {
        "desktop": {
          "additionalProperties": false,
          "patternProperties": {
            "^[0-9]+$": {
              "additionalProperties": false,
              "properties": {
                "height": {
                  "type": "number"
                },
                "padding": {
                  "type": "number"
                },
                "width": {
                  "type": "number"
                },
                "x": {
                  "type": "number"
                },
                "y": {
                  "type": "number"
                }
              },
              "required": ["height", "width", "x", "y"],
              "type": "object"
            }
          },
          "type": "object"
        },
        "phone": {
          "additionalProperties": false,
          "patternProperties": {
            "^[0-9]+$": {
              "additionalProperties": false,
              "properties": {
                "height": {
                  "type": "number"
                },
                "padding": {
                  "type": "number"
                },
                "width": {
                  "type": "number"
                },
                "x": {
                  "type": "number"
                },
                "y": {
                  "type": "number"
                }
              },
              "required": ["height", "width", "x", "y"],
              "type": "object"
            }
          },
          "type": "object"
        },
        "tablet": {
          "additionalProperties": false,
          "patternProperties": {
            "^[0-9]+$": {
              "additionalProperties": false,
              "properties": {
                "height": {
                  "type": "number"
                },
                "padding": {
                  "type": "number"
                },
                "width": {
                  "type": "number"
                },
                "x": {
                  "type": "number"
                },
                "y": {
                  "type": "number"
                }
              },
              "required": ["height", "width", "x", "y"],
              "type": "object"
            }
          },
          "type": "object"
        }
      },
      "required": ["desktop", "phone", "tablet"],
      "type": "object"
    },
    "MethodReference": {
      "additionalProperties": false,
      "description": "A description of a user-facing method of a component.",
      "properties": {
        "description": {
          "type": "string"
        }
      },
      "required": ["description"],
      "type": "object"
    },
    "MethodReferences": {
      "additionalProperties": {
        "$ref": "#/definitions/MethodReference"
      },
      "description": "A map of method names and their descriptions.",
      "type": "object"
    },
    "Modal": {
      "additionalProperties": false,
      "properties": {
        "content": {
          "additionalProperties": false,
          "properties": {
            "body": {
              "type": "string"
            },
            "footer": {
              "additionalProperties": false,
              "properties": {
                "buttons": {
                  "items": {
                    "additionalProperties": false,
                    "properties": {
                      "label": {
                        "type": "string"
                      },
                      "parameters": {
                        "additionalProperties": false,
                        "properties": {
                          "route": {
                            "type": "string"
                          }
                        },
                        "required": ["route"],
                        "type": "object"
                      },
                      "type": {
                        "enum": ["close", "route"],
                        "type": "string"
                      }
                    },
                    "required": ["label", "type"],
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "required": ["buttons"],
              "type": "object"
            },
            "header": {
              "type": "string"
            }
          },
          "required": ["body", "footer", "header"],
          "type": "object"
        },
        "trigger": {
          "additionalProperties": false,
          "properties": {
            "type": {
              "const": "success",
              "type": "string"
            }
          },
          "required": ["type"],
          "type": "object"
        }
      },
      "required": ["content", "trigger"],
      "type": "object"
    },
    "NestedComponents": {
      "additionalProperties": {
        "anyOf": [
          {
            "$ref": "#/definitions/NestedComponents"
          },
          {
            "$ref": "#/definitions/SerializedBaseComponent<string>"
          }
        ]
      },
      "description": "Possible nested components of a component. The components can be nested arbitrarily.",
      "type": "object"
    },
    "PathComparisonConfiguration": {
      "additionalProperties": false,
      "description": "Configuration for basic comparison operations with dynamic values from paths.",
      "properties": {
        "operator": {
          "$ref": "#/definitions/BasicComparisonOperators"
        },
        "path": {
          "$ref": "#/definitions/JSONPathExpression"
        }
      },
      "required": ["operator", "path"],
      "type": "object"
    },
    "SerialisedDependencies": {
      "additionalProperties": false,
      "description": "Serialised dependencies of a component.",
      "type": "object"
    },
    "SerialisedNode": {
      "additionalProperties": false,
      "properties": {
        "components": {
          "additionalProperties": false,
          "patternProperties": {
            "^[0-9]+$": {
              "$ref": "#/definitions/SerializedCARPETComponents"
            }
          },
          "type": "object"
        },
        "hints": {
          "$ref": "#/definitions/Hints"
        },
        "isCorrect": {
          "type": "boolean"
        },
        "isValid": {
          "type": "boolean"
        },
        "layouts": {
          "$ref": "#/definitions/Layouts"
        },
        "modal": {
          "items": {
            "$ref": "#/definitions/Modal"
          },
          "type": "array"
        }
      },
      "required": ["components", "layouts"],
      "type": "object"
    },
    "SerializedBaseComponent<string>": {
      "additionalProperties": false,
      "description": "Generic type description with defaults of a serialised base component.",
      "properties": {
        "componentConfiguration": {
          "$ref": "#/definitions/ComponentConfiguration",
          "description": "Configuration options that are specific to the individual component."
        },
        "contextMenu": {
          "additionalProperties": false,
          "description": "Optional: The context menu of the component.",
          "properties": {
            "isOpen": {
              "description": "Specifies whether the context menu is open.",
              "type": "boolean"
            },
            "usedMethods": {
              "description": "The methods that will be made available in the context menu.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": ["isOpen", "usedMethods"],
          "type": "object"
        },
        "dependencies": {
          "$ref": "#/definitions/SerialisedDependencies",
          "description": "The dependencies of the component."
        },
        "methods": {
          "$ref": "#/definitions/MethodReferences",
          "description": "Optional: The methods of the component."
        },
        "name": {
          "description": "The name of the component instance. Will be displayed in the component header in CARPET.",
          "type": "string"
        },
        "nestedComponents": {
          "$ref": "#/definitions/NestedComponents",
          "description": "Optional: Nested components of the component."
        },
        "state": {
          "additionalProperties": false,
          "description": "The state of the component.",
          "properties": {
            "isCorrect": {
              "description": "Specifices whether the user-inputs put the component in a correct state. Inputs are validated according to the components validation specification.",
              "type": "boolean"
            },
            "isValid": {
              "description": "Specifices whether the user-inputs put the component in a valid state. Gives no indication of correctness of the inputs.",
              "type": "boolean"
            }
          },
          "required": ["isCorrect", "isValid"],
          "type": "object"
        },
        "type": {
          "description": "The type of the component.",
          "type": "string"
        },
        "validationConfiguration": {
          "description": "The validation configuration of the component.",
          "properties": {},
          "type": "object"
        }
      },
      "required": ["dependencies", "name", "state", "type"],
      "type": "object"
    },
    "SerializedButtonComponent": {
      "additionalProperties": false,
      "description": "The SerializedButtonComponent interface is used to define the serialised properties of the Button component.",
      "properties": {
        "componentConfiguration": {
          "$ref": "#/definitions/ButtonConfiguration",
          "description": "Configuration options that are specific to the individual component."
        },
        "contextMenu": {
          "additionalProperties": false,
          "description": "Optional: The context menu of the component.",
          "properties": {
            "isOpen": {
              "description": "Specifies whether the context menu is open.",
              "type": "boolean"
            },
            "usedMethods": {
              "description": "The methods that will be made available in the context menu.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": ["isOpen", "usedMethods"],
          "type": "object"
        },
        "dependencies": {
          "$ref": "#/definitions/SerializedButtonDependencies",
          "description": "The dependencies of the component."
        },
        "methods": {
          "$ref": "#/definitions/MethodReferences",
          "description": "Optional: The methods of the component."
        },
        "name": {
          "description": "The name of the component instance. Will be displayed in the component header in CARPET.",
          "type": "string"
        },
        "nestedComponents": {
          "$ref": "#/definitions/NestedComponents",
          "description": "Optional: Nested components of the component."
        },
        "state": {
          "$ref": "#/definitions/ButtonComponentState",
          "description": "The state of the component."
        },
        "type": {
          "const": "GenericButton",
          "description": "The type of the component.",
          "type": "string"
        },
        "validationConfiguration": {
          "description": "The validation configuration of the component.",
          "properties": {},
          "type": "object"
        }
      },
      "required": [
        "componentConfiguration",
        "dependencies",
        "name",
        "state",
        "type"
      ],
      "type": "object"
    },
    "SerializedButtonDependencies": {
      "additionalProperties": false,
      "description": "The Button-component has no dependencies.",
      "type": "object"
    },
    "SerializedCARPETComponents": {
      "anyOf": [
        {
          "$ref": "#/definitions/SerializedButtonComponent"
        },
        {
          "$ref": "#/definitions/SerializedDOTGraphComponent"
        },
        {
          "$ref": "#/definitions/SerializedInputFieldComponent"
        },
        {
          "$ref": "#/definitions/SerializedFormComponent"
        },
        {
          "$ref": "#/definitions/SerializedCodeEditorComponent"
        }
      ]
    },
    "SerializedCodeEditorComponent": {
      "additionalProperties": false,
      "description": "The SerializedCodeEditorComponent interface is used to define the serialised properties of the CodeEditor component.",
      "properties": {
        "componentConfiguration": {
          "$ref": "#/definitions/CodeEditorConfiguration",
          "description": "Configuration options that are specific to the individual component."
        },
        "contextMenu": {
          "additionalProperties": false,
          "description": "Optional: The context menu of the component.",
          "properties": {
            "isOpen": {
              "description": "Specifies whether the context menu is open.",
              "type": "boolean"
            },
            "usedMethods": {
              "description": "The methods that will be made available in the context menu.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": ["isOpen", "usedMethods"],
          "type": "object"
        },
        "dependencies": {
          "$ref": "#/definitions/SerializedCodeEditorDependencies",
          "description": "The dependencies of the component."
        },
        "methods": {
          "$ref": "#/definitions/MethodReferences",
          "description": "Optional: The methods of the component."
        },
        "name": {
          "description": "The name of the component instance. Will be displayed in the component header in CARPET.",
          "type": "string"
        },
        "nestedComponents": {
          "$ref": "#/definitions/NestedComponents",
          "description": "Optional: Nested components of the component."
        },
        "state": {
          "$ref": "#/definitions/CodeEditorComponentState",
          "description": "The state of the component."
        },
        "type": {
          "const": "CodeEditor",
          "description": "The type of the component.",
          "type": "string"
        },
        "validationConfiguration": {
          "$ref": "#/definitions/CodeEditorValidationConfiguration<keyofCodeEditorValidationConfigurationMap>",
          "description": "The validation configuration of the component."
        }
      },
      "required": ["dependencies", "name", "state", "type"],
      "type": "object"
    },
    "SerializedCodeEditorDependencies": {
      "additionalProperties": false,
      "description": "The CodeEditor-component requires the following dependencies. The paths to the dependencies are defined here via JSONPathExpression.",
      "properties": {
        "code": {
          "$ref": "#/definitions/JSONPathExpression",
          "description": "The code-property is a JSONPathExpression that may point to the user's code."
        },
        "globalDarkMode": {
          "$ref": "#/definitions/JSONPathExpression",
          "description": "The globalDarkMode-property is a JSONPathExpression that may point to the user's dark mode preference."
        },
        "referenceCode": {
          "$ref": "#/definitions/JSONPathExpression",
          "description": "The referenceCode-property is a JSONPathExpression that points to the reference code that the user's code will be compared against."
        }
      },
      "type": "object"
    },
    "SerializedDOTGraphComponent": {
      "additionalProperties": false,
      "description": "The SerializedDOTGraphComponent interface is used to define the serialised properties of the DOTGraph component.",
      "properties": {
        "componentConfiguration": {
          "$ref": "#/definitions/ComponentConfiguration",
          "description": "Configuration options that are specific to the individual component."
        },
        "contextMenu": {
          "additionalProperties": false,
          "description": "Optional: The context menu of the component.",
          "properties": {
            "isOpen": {
              "description": "Specifies whether the context menu is open.",
              "type": "boolean"
            },
            "usedMethods": {
              "description": "The methods that will be made available in the context menu.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": ["isOpen", "usedMethods"],
          "type": "object"
        },
        "dependencies": {
          "$ref": "#/definitions/SerializedDOTGraphDependencies",
          "description": "The dependencies of the component."
        },
        "methods": {
          "$ref": "#/definitions/MethodReferences",
          "description": "Optional: The methods of the component."
        },
        "name": {
          "description": "The name of the component instance. Will be displayed in the component header in CARPET.",
          "type": "string"
        },
        "nestedComponents": {
          "$ref": "#/definitions/NestedComponents",
          "description": "Optional: Nested components of the component."
        },
        "state": {
          "$ref": "#/definitions/DotGraphComponentState",
          "description": "The state of the component."
        },
        "type": {
          "const": "DOTGraph",
          "description": "The type of the component.",
          "type": "string"
        },
        "validationConfiguration": {
          "description": "The validation configuration of the component.",
          "properties": {},
          "type": "object"
        }
      },
      "required": ["dependencies", "name", "state", "type"],
      "type": "object"
    },
    "SerializedDOTGraphDependencies": {
      "additionalProperties": false,
      "description": "The DOTGraph-component requires a valid dotDescription to display.",
      "properties": {
        "dotDescription": {
          "$ref": "#/definitions/JSONPathExpression",
          "description": "The dotDescription is a JSONPathExpression, that points to the dotDescription of the DOTGraph-component."
        }
      },
      "required": ["dotDescription"],
      "type": "object"
    },
    "SerializedFormComponent": {
      "additionalProperties": false,
      "description": "The SerializedFormComponent interface is used to define the serialised properties of the Form component.",
      "properties": {
        "componentConfiguration": {
          "$ref": "#/definitions/ComponentConfiguration",
          "description": "Configuration options that are specific to the individual component."
        },
        "contextMenu": {
          "additionalProperties": false,
          "description": "Optional: The context menu of the component.",
          "properties": {
            "isOpen": {
              "description": "Specifies whether the context menu is open.",
              "type": "boolean"
            },
            "usedMethods": {
              "description": "The methods that will be made available in the context menu.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": ["isOpen", "usedMethods"],
          "type": "object"
        },
        "dependencies": {
          "$ref": "#/definitions/SerializedFormDependencies",
          "description": "The dependencies of the component."
        },
        "methods": {
          "$ref": "#/definitions/MethodReferences",
          "description": "Optional: The methods of the component."
        },
        "name": {
          "description": "The name of the component instance. Will be displayed in the component header in CARPET.",
          "type": "string"
        },
        "nestedComponents": {
          "$ref": "#/definitions/FormNestedComponents",
          "description": "Optional: Nested components of the component."
        },
        "state": {
          "$ref": "#/definitions/FormComponentState",
          "description": "The state of the component."
        },
        "type": {
          "const": "GenericForm",
          "description": "The type of the component.",
          "type": "string"
        },
        "validationConfiguration": {
          "$ref": "#/definitions/FormValidationConfiguration",
          "description": "The validation configuration of the component."
        }
      },
      "required": [
        "dependencies",
        "name",
        "nestedComponents",
        "state",
        "type",
        "validationConfiguration"
      ],
      "type": "object"
    },
    "SerializedFormDependencies": {
      "additionalProperties": {
        "$ref": "#/definitions/JSONPathExpression"
      },
      "description": "The Form-component may point to external dependencies for validation checks.\nThe external dependencies must be references to other components.",
      "type": "object"
    },
    "SerializedInputFieldComponent": {
      "additionalProperties": false,
      "description": "The SerializedInputFieldComponent interface is used to define the serialised properties of the InputField component.",
      "properties": {
        "componentConfiguration": {
          "$ref": "#/definitions/FieldConfiguration",
          "description": "Configuration options that are specific to the individual component."
        },
        "contextMenu": {
          "additionalProperties": false,
          "description": "Optional: The context menu of the component.",
          "properties": {
            "isOpen": {
              "description": "Specifies whether the context menu is open.",
              "type": "boolean"
            },
            "usedMethods": {
              "description": "The methods that will be made available in the context menu.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": ["isOpen", "usedMethods"],
          "type": "object"
        },
        "dependencies": {
          "$ref": "#/definitions/SerializedInputFieldDependencies",
          "description": "The dependencies of the component."
        },
        "methods": {
          "$ref": "#/definitions/MethodReferences",
          "description": "Optional: The methods of the component."
        },
        "name": {
          "description": "The name of the component instance. Will be displayed in the component header in CARPET.",
          "type": "string"
        },
        "nestedComponents": {
          "$ref": "#/definitions/NestedComponents",
          "description": "Optional: Nested components of the component."
        },
        "state": {
          "$ref": "#/definitions/InputFieldComponentState",
          "description": "The state of the component."
        },
        "type": {
          "const": "InputField",
          "description": "The type of the component.",
          "type": "string"
        },
        "validationConfiguration": {
          "$ref": "#/definitions/({type:\"matchAgainstRegExp\";}&MatchAgainstRegExpValidationStrategy)|({type:\"externalValidation\";}&ExternalValidationStrategy)",
          "description": "The validation configuration of the component."
        }
      },
      "required": [
        "componentConfiguration",
        "dependencies",
        "name",
        "state",
        "type",
        "validationConfiguration"
      ],
      "type": "object"
    },
    "SerializedInputFieldDependencies": {
      "additionalProperties": false,
      "description": "The InputField-component may load its value from a reference value.",
      "properties": {
        "referenceValue": {
          "$ref": "#/definitions/JSONPathExpression"
        }
      },
      "type": "object"
    },
    "StaticComparisonConfiguration": {
      "additionalProperties": false,
      "description": "Configuration for basic comparison operations with static values.",
      "properties": {
        "operator": {
          "$ref": "#/definitions/BasicComparisonOperators"
        },
        "value": {
          "type": ["string", "number"]
        }
      },
      "required": ["operator", "value"],
      "type": "object"
    },
    "TaskData": {
      "additionalProperties": {},
      "type": "object"
    },
    "quasar.NamedColor": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {},
          "type": "object"
        },
        {
          "enum": [
            "accent",
            "amber",
            "amber-1",
            "amber-10",
            "amber-11",
            "amber-12",
            "amber-13",
            "amber-14",
            "amber-2",
            "amber-3",
            "amber-4",
            "amber-5",
            "amber-6",
            "amber-7",
            "amber-8",
            "amber-9",
            "blue",
            "blue-1",
            "blue-10",
            "blue-11",
            "blue-12",
            "blue-13",
            "blue-14",
            "blue-2",
            "blue-3",
            "blue-4",
            "blue-5",
            "blue-6",
            "blue-7",
            "blue-8",
            "blue-9",
            "blue-grey",
            "blue-grey-1",
            "blue-grey-10",
            "blue-grey-11",
            "blue-grey-12",
            "blue-grey-13",
            "blue-grey-14",
            "blue-grey-2",
            "blue-grey-3",
            "blue-grey-4",
            "blue-grey-5",
            "blue-grey-6",
            "blue-grey-7",
            "blue-grey-8",
            "blue-grey-9",
            "brown",
            "brown-1",
            "brown-10",
            "brown-11",
            "brown-12",
            "brown-13",
            "brown-14",
            "brown-2",
            "brown-3",
            "brown-4",
            "brown-5",
            "brown-6",
            "brown-7",
            "brown-8",
            "brown-9",
            "cyan",
            "cyan-1",
            "cyan-10",
            "cyan-11",
            "cyan-12",
            "cyan-13",
            "cyan-14",
            "cyan-2",
            "cyan-3",
            "cyan-4",
            "cyan-5",
            "cyan-6",
            "cyan-7",
            "cyan-8",
            "cyan-9",
            "dark",
            "deep-orange",
            "deep-orange-1",
            "deep-orange-10",
            "deep-orange-11",
            "deep-orange-12",
            "deep-orange-13",
            "deep-orange-14",
            "deep-orange-2",
            "deep-orange-3",
            "deep-orange-4",
            "deep-orange-5",
            "deep-orange-6",
            "deep-orange-7",
            "deep-orange-8",
            "deep-orange-9",
            "deep-purple",
            "deep-purple-1",
            "deep-purple-10",
            "deep-purple-11",
            "deep-purple-12",
            "deep-purple-13",
            "deep-purple-14",
            "deep-purple-2",
            "deep-purple-3",
            "deep-purple-4",
            "deep-purple-5",
            "deep-purple-6",
            "deep-purple-7",
            "deep-purple-8",
            "deep-purple-9",
            "green",
            "green-1",
            "green-10",
            "green-11",
            "green-12",
            "green-13",
            "green-14",
            "green-2",
            "green-3",
            "green-4",
            "green-5",
            "green-6",
            "green-7",
            "green-8",
            "green-9",
            "grey",
            "grey-1",
            "grey-10",
            "grey-11",
            "grey-12",
            "grey-13",
            "grey-14",
            "grey-2",
            "grey-3",
            "grey-4",
            "grey-5",
            "grey-6",
            "grey-7",
            "grey-8",
            "grey-9",
            "indigo",
            "indigo-1",
            "indigo-10",
            "indigo-11",
            "indigo-12",
            "indigo-13",
            "indigo-14",
            "indigo-2",
            "indigo-3",
            "indigo-4",
            "indigo-5",
            "indigo-6",
            "indigo-7",
            "indigo-8",
            "indigo-9",
            "info",
            "light-blue",
            "light-blue-1",
            "light-blue-10",
            "light-blue-11",
            "light-blue-12",
            "light-blue-13",
            "light-blue-14",
            "light-blue-2",
            "light-blue-3",
            "light-blue-4",
            "light-blue-5",
            "light-blue-6",
            "light-blue-7",
            "light-blue-8",
            "light-blue-9",
            "light-green",
            "light-green-1",
            "light-green-10",
            "light-green-11",
            "light-green-12",
            "light-green-13",
            "light-green-14",
            "light-green-2",
            "light-green-3",
            "light-green-4",
            "light-green-5",
            "light-green-6",
            "light-green-7",
            "light-green-8",
            "light-green-9",
            "lime",
            "lime-1",
            "lime-10",
            "lime-11",
            "lime-12",
            "lime-13",
            "lime-14",
            "lime-2",
            "lime-3",
            "lime-4",
            "lime-5",
            "lime-6",
            "lime-7",
            "lime-8",
            "lime-9",
            "negative",
            "orange",
            "orange-1",
            "orange-10",
            "orange-11",
            "orange-12",
            "orange-13",
            "orange-14",
            "orange-2",
            "orange-3",
            "orange-4",
            "orange-5",
            "orange-6",
            "orange-7",
            "orange-8",
            "orange-9",
            "pink",
            "pink-1",
            "pink-10",
            "pink-11",
            "pink-12",
            "pink-13",
            "pink-14",
            "pink-2",
            "pink-3",
            "pink-4",
            "pink-5",
            "pink-6",
            "pink-7",
            "pink-8",
            "pink-9",
            "positive",
            "primary",
            "purple",
            "purple-1",
            "purple-10",
            "purple-11",
            "purple-12",
            "purple-13",
            "purple-14",
            "purple-2",
            "purple-3",
            "purple-4",
            "purple-5",
            "purple-6",
            "purple-7",
            "purple-8",
            "purple-9",
            "red",
            "red-1",
            "red-10",
            "red-11",
            "red-12",
            "red-13",
            "red-14",
            "red-2",
            "red-3",
            "red-4",
            "red-5",
            "red-6",
            "red-7",
            "red-8",
            "red-9",
            "secondary",
            "teal",
            "teal-1",
            "teal-10",
            "teal-11",
            "teal-12",
            "teal-13",
            "teal-14",
            "teal-2",
            "teal-3",
            "teal-4",
            "teal-5",
            "teal-6",
            "teal-7",
            "teal-8",
            "teal-9",
            "warning",
            "yellow",
            "yellow-1",
            "yellow-10",
            "yellow-11",
            "yellow-12",
            "yellow-13",
            "yellow-14",
            "yellow-2",
            "yellow-3",
            "yellow-4",
            "yellow-5",
            "yellow-6",
            "yellow-7",
            "yellow-8",
            "yellow-9"
          ],
          "type": "string"
        }
      ]
    },
    "quasar.ValidationRule": {
      "anyOf": [
        {
          "additionalProperties": false,
          "type": "object"
        },
        {
          "enum": [
            "anyColor",
            "date",
            "email",
            "fulltime",
            "hexColor",
            "hexOrHexaColor",
            "hexOrRgbColor",
            "hexaColor",
            "hexaOrRgbaColor",
            "rgbColor",
            "rgbOrRgbaColor",
            "rgbaColor",
            "time",
            "timeOrFulltime"
          ],
          "type": "string"
        }
      ]
    },
    "quasar.VueClassProp": {
      "anyOf": [
        {
          "additionalProperties": {},
          "type": "object"
        },
        {
          "items": {
            "$ref": "#/definitions/quasar.VueClassProp"
          },
          "type": "array"
        },
        {
          "type": "string"
        }
      ]
    }
  },
  "properties": {
    "edges": {
      "additionalProperties": false,
      "patternProperties": {
        "^[0-9]+$": {
          "items": {
            "type": "number"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "feedbackLevel": {
      "enum": [
        "correctness",
        "none",
        "unpromptedFeedback",
        "unpromptedHints",
        "validity"
      ],
      "type": "string"
    },
    "layoutSize": {
      "$ref": "#/definitions/LayoutSizes"
    },
    "nodes": {
      "additionalProperties": false,
      "patternProperties": {
        "^[0-9]+$": {
          "$ref": "#/definitions/SerialisedNode"
        }
      },
      "type": "object"
    },
    "rootNode": {
      "type": "number"
    },
    "taskData": {
      "$ref": "#/definitions/TaskData"
    }
  },
  "required": ["edges", "nodes"],
  "type": "object"
}
