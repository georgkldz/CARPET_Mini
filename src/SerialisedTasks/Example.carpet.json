{
  "feedbackLevel": "none",
  "rootNode": 0,
  "nodes": {
    "0": {
      "layouts": {
        "desktop": {
          "0": {
            "x": 1,
            "y": 1,
            "width": 20,
            "height": 30
          },
          "1": {
            "x": 26,
            "y": 26,
            "width": 5,
            "height": 5
          },
          "2": {
            "x": 26,
            "y": 32,
            "width": 5,
            "height": 5
          },
          "3": {
            "x": 30,
            "y": 32,
            "width": 5,
            "height": 5
          }
        },
        "phone": {
          "0": {
            "x": 20,
            "y": 20,
            "width": 2,
            "height": 2
          }
        },
        "tablet": {
          "0": {
            "x": 20,
            "y": 20,
            "width": 2,
            "height": 2
          }
        }
      },
      "components": {
        "0": {
          "type": "GenericForm",
          "name": "Einzelbearbeitung",
          "dependencies": {},
          "validationConfiguration": {
            "submitableWhen": "isValid"
          },
          "state": {
            "isValid": true,
            "isCorrect": true,
            "dependenciesAreValidAndFormFieldsAreCorrect": false,
            "formFieldsAreValidAndDependenciesAreCorrect": false
          },
          "nestedComponents": {
            "formComponents": {

              "inputField1": {
                "type": "InputField",
                "name": "InputField1",
                "state": {
                  "isValid": false,
                  "isCorrect": false,
                  "fieldValue": "dock"
                },
                "dependencies": {},
                "validationConfiguration": {
                  "type": "compareValueFromStatic",
                  "comparisons": [
                    {
                      "value": "test",
                      "operator": "=="
                    }
                  ],
                  "validOnEmptyField": true
                },
                "componentConfiguration": {
                  "icon": "10k",
                  "label": "zB",
                  "hint": "zB"
                }
              },
              "inputField2": {
                "type": "InputField",
                "name": "InputField1",
                "state": {
                  "isValid": false,
                  "isCorrect": false,
                  "fieldValue": "dock"
                },
                "dependencies": {},
                "validationConfiguration": {
                  "type": "compareValueFromStatic",
                  "comparisons": [
                    {
                      "value": "test",
                      "operator": "=="
                    }
                  ],
                  "validOnEmptyField": true
                },
                "componentConfiguration": {
                  "icon": "10k",
                  "label": "zB",
                  "hint": "zB"
                }
              },
              "inputField3": {
                "type": "InputField",
                "name": "InputField1",
                "state": {
                  "isValid": false,
                  "isCorrect": false,
                  "fieldValue": "dock"
                },
                "dependencies": {},
                "validationConfiguration": {
                  "type": "compareValueFromStatic",
                  "comparisons": [
                    {
                      "value": "test",
                      "operator": "=="
                    }
                  ],
                  "validOnEmptyField": true
                },
                "componentConfiguration": {
                  "icon": "10k",
                  "label": "zB",
                  "hint": "zB"
                }
              }
            },
            "actionComponents": {
              "submit": {
                "type": "GenericButton",
                "name": "Submit",
                "dependencies": {},
                "validationConfiguration": {},
                "state": {
                  "isValid": true,
                  "isCorrect": true,
                  "label": "Submit",
                  "loadingState": false
                },
                "componentConfiguration": {
                  "disableOnInvalid": true
                }
              }
            }
          }
        },
        "1": {
          "type": "CodeEditor",
          "name": "Code",
          "state": {
            "isCorrect": false,
            "isValid": false,
            "code": "test"
          },
          "dependencies": {
            "code": "$.nodes.0.components.2.state.fieldValue"
          },
          "validationConfiguration": {
            "type": "compareToString"
          },
          "componentConfiguration": {
            "darkMode": false,
            "language": "sql"
          }
        },
        "2": {
          "type": "InputField",
          "name": "test",
          "state": {
            "fieldValue": "test",
            "isCorrect": false,
            "isValid": false
          },
          "dependencies": {},
          "validationConfiguration": {
            "type": "compareValueFromStatic",
            "comparisons": [
              {
                "value": "test",
                "operator": "=="
              }
            ],
            "validOnEmptyField": true
          },
          "componentConfiguration": {
            "icon": "10k",
            "label": "tests",
            "hint": "asd"
          }
        },
        "3": {}
      }
    }
  },
  "edges": {
    "0": [1]
  },
  "layoutSize": "desktop",
  "taskData": {
    "taskDescription": "",
    "degree": 3,
    "symmetry": "none",
    "hint": "",
    "solutions": {
      "textFieldEquation1": "f(1)=-2",
      "textFieldEquation2": "f'(3)=0",
      "textFieldEquation3": "f''(4)=0",
      "textFieldEquation4": "f(-7)=5",
      "textFieldEquation5": "",
      "sampleSolutionCollaborativeWork": ""
    },
    "dotDescription": "digraph G { bgcolor=transparent  a->b; b->c; c->a; }"
  }
}
